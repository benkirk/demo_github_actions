name: Build HPC Development Images

on:
  workflow_dispatch:
    inputs:
      os:
        description: "Base OS"
        type: choice
        required: true
        default: almalinux9
        options:
          - almalinux8
          - almalinux9
          - almalinux10
          - jammy
          - noble
          - leap
          - tumbleweed

      docker_repo:
        description: "Docker Repository for Deployment"
        type: choice
        required: true
        default: "ncarcisl/hpcdev"
        options:
          - "benjaminkirk/gh-ci"
          - "benjaminkirk/hpcdev"
          - "ncarcisl/gh-ci"
          - "ncarcisl/hpcdev"

      test:
        description: "Test Image"
        type: boolean
        required: false
        default: true

      publish:
        description: "Publish Image"
        type: boolean
        required: false
        default: false

jobs:
  build-matrix:
    name: Build
    strategy:
      fail-fast: false
      max-parallel: 16
      matrix:
        compiler: [nvhpc, oneapi, aocc, gcc, gcc12, gcc14]
        mpi: [openmpi, mpich]
        gpu: [nogpu, cuda]
        arch: [x86_64, aarch64]

        include:
          # gpu architecture-dependent build arg specifications
          - arch: x86_64
            gpu: cuda
            gpu_build_args: |
              CUDA_VERSION=12.9
              CUDA_INSTALLER_URL=https://developer.download.nvidia.com/compute/cuda/12.9.1/local_installers/cuda_12.9.1_575.57.08_linux.run

          - arch: aarch64
            gpu: cuda
            gpu_build_args: |
              CUDA_VERSION=12.9
              CUDA_INSTALLER_URL=https://developer.download.nvidia.com/compute/cuda/12.9.1/local_installers/cuda_12.9.1_575.57.08_linux_sbsa.run

          # compiler build arg specifications
          - compiler: gcc
            compiler_build_args: |
              COMPILER_FAMILY=os-gcc

          - compiler: gcc12
            compiler_build_args: |
              COMPILER_FAMILY=gcc
              GCC_VERSION=12.5.0

          - compiler: gcc14
            compiler_build_args: |
              COMPILER_FAMILY=gcc
              GCC_VERSION=14.2.0

          - compiler: oneapi
            compiler_build_args: |
              COMPILER_FAMILY=oneapi
              ONEAPI_VERSION=2025.2.1
              ONEAPI_CC_URL=https://registrationcenter-download.intel.com/akdlm/IRC_NAS/04c5fd98-57e6-4a4b-be4d-e84de3aea45a/intel-dpcpp-cpp-compiler-2025.2.1.7_offline.sh
              ONEAPI_FC_URL=https://registrationcenter-download.intel.com/akdlm/IRC_NAS/466b0d65-e502-4172-9e06-24c565029b96/intel-fortran-compiler-2025.2.1.9_offline.sh

          - compiler: aocc
            compiler_build_args: |
              COMPILER_FAMILY=aocc

          # for NVHPC, we can specify a different CUDA if it suits us.
          # (since the compiler args come after gpu args in build-hpc-development-image.yaml we are relying on precedence)
          - compiler: nvhpc
            arch: x86_64
            compiler_build_args: |
              COMPILER_FAMILY=nvhpc
              MARCH_FLAGS=-march=x86-64-v3
              NVHPC_VERSION=25.9
              NVHPC_URL=https://developer.download.nvidia.com/hpc-sdk/25.9/nvhpc_2025_259_Linux_x86_64_cuda_13.0.tar.gz
              CUDA_VERSION=13.0
              CUDA_INSTALLER_URL=https://developer.download.nvidia.com/compute/cuda/13.0.2/local_installers/cuda_13.0.2_580.95.05_linux.run

          - compiler: nvhpc
            arch: aarch64
            compiler_build_args: |
              COMPILER_FAMILY=nvhpc
              NVHPC_VERSION=25.9
              NVHPC_URL=https://developer.download.nvidia.com/hpc-sdk/25.9/nvhpc_2025_259_Linux_aarch64_cuda_13.0.tar.gz
              CUDA_VERSION=13.0
              CUDA_INSTALLER_URL=https://developer.download.nvidia.com/compute/cuda/13.0.2/local_installers/cuda_13.0.2_580.95.05_linux_sbsa.run

          # # clang+flang from source always seems to fail on GHA public runners -
          # # 16GB of RAM simply isn't enough for flang as of 20.1.8.
          # # Need build cloud or caches from CIRRUS
          # - compiler: clang
          #   compiler_build_args: |
          #     COMPILER_FAMILY=clang
          #     LLVM_VERSION=21.1.3

          # mpi build arg specifications
          - mpi: openmpi
            mpi_build_args: |
              MPI_FAMILY=openmpi
              OPENMPI_VERSION=5.0.8

          - mpi: mpich
            mpi_build_args: |
              MPI_FAMILY=mpich
              MPICH_VERSION=4.3.2

          # - mpi: mpich3
          #   mpi_build_args: |
          #     MPI_FAMILY=mpich3
          #     MPICH_VERSION=3.4.3

        exclude:
          - arch: aarch64
            compiler: oneapi
          - arch: aarch64
            compiler: aocc
          - arch: aarch64
            mpi: mpich3

          - compiler: nvhpc
            arch: aarch64
            mpi: mpich

          - compiler: clang
            arch: aarch64

    uses: ./.github/workflows/build-hpc-development-image.yaml
    with:
      docker_repo: ${{ inputs.docker_repo }}
      os: ${{ inputs.os }}
      arch: ${{ matrix.arch }}
      runner: ${{ matrix.arch == 'x86_64' && 'ubuntu-latest' || 'ubuntu-24.04-arm' }}
      free_runner_space: true
      conda: true
      gpu: ${{ matrix.gpu }}
      gpu_build_args: ${{ matrix.gpu_build_args }}
      compiler: ${{ matrix.compiler }}
      compiler_build_args: ${{ matrix.compiler_build_args }}
      mpi: ${{ matrix.mpi }}
      mpi_build_args: ${{ matrix.mpi_build_args }}
      test: ${{ inputs.test }}
      publish: ${{ inputs.publish }}
      extra_build_args: |
        HDF5_VERSION=1.12.3
        HDF5_URL=https://github.com/HDFGroup/hdf5/releases/download/hdf5-1_12_3/hdf5-1_12_3.tar.gz
        NETCDF_C_VERSION=4.9.3
        NETCDF_FORTRAN_VERSION=4.6.2
        PNETCDF_VERSION=1.14.1
        PIO_VERSION=2.6.6
        PIO_TAG=pio2_6_6
        FFTW_VERSION=3.3.10
        HEFFTE_VERSION=2.4.1

    secrets:
      dockerhub_token: ${{ secrets.BENKIRK_DOCKERHUB_TOKEN }}
