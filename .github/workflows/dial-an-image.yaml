name: Select HPC Development Container Image

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Base OS'
        type: choice
        required: true
        default: almalinux9
        options:
          - almalinux8
          - almalinux9
          - leap
          - tumbleweed
          - noble

      include_conda:
        description: 'Include Conda (Miniforge)'
        type: boolean
        required: false
        default: false

      compiler:
        description: 'Compiler'
        type: choice
        required: true
        default: os-gcc
        options:
          - os-gcc
          - gcc
          - oneapi
          - aocc
          - nvhpc
          - '<disabled>'

      compiler_version:
        description: 'Compiler Version'
        type: string
        required: false
        default: ''

      include_cuda:
        description: 'Include CUDA'
        type: boolean
        required: false
        default: false

      mpi:
        description: 'MPI'
        type: choice
        required: true
        default: openmpi
        options:
          - openmpi
          - mpich
          - mpich3
          - '<disabled>'

      mpi_version:
        description: 'MPI Version'
        type: string
        required: false
        default: ''

jobs:

  build-image:
    name: Build Container Image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
          fetch-depth: 0

      - name: Create containers/devenv/extras
        run: |
          sudo apt-get update
          sudo apt-get install make
          which make
          pwd
          ls
          make -C containers/devenv extras

      - name: Interrogate Environment
        run: |
          cat /etc/os-release
          uname -a
          env | sort
          df -h
          lscpu
          cat << EOF > build_inputs.txt
          os: '${{ inputs.os }}'
          compiler: '${{ inputs.compiler }}'
          compiler_version: '${{ inputs.compiler_version }}'
          mpi: '${{ inputs.mpi }}'
          mpi_version: '${{ inputs.mpi_version }}'
          include_cuda: '${{ inputs.include_cuda }}'
          include_conda: '${{ inputs.include_conda }}'
          EOF
          echo && echo "Build Inputs:" && cat build_inputs.txt
          shasum build_inputs.txt > inputs_sha.txt
          cat inputs_sha.txt
          echo "INPUTS_SHA=$(cat inputs_sha.txt | cut -c1-7)" >> $GITHUB_ENV

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}
          password: ${{ secrets.BENKIRK_DOCKERHUB_TOKEN }}

      - name: Pre-build Query Docker Environment
        run: |
          which docker
          docker --version
          docker buildx ls
          docker buildx inspect
          docker buildx du

      - name: Build BaseOS
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-${{ inputs.os }}:latest
          cache-from: type=registry,ref=${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-${{ inputs.os }}:buildcache-${{env.INPUTS_SHA }}
          cache-to: type=registry,ref=${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-${{ inputs.os }}:buildcache-${{env.INPUTS_SHA }},mode=max
          context: containers/devenv
          file: containers/devenv/Dockerfile
          build-args: |
            BASE_OS=${{ inputs.os }}
            COMPILER_FAMILY=os-gcc
            COMPILERS_PREREQ=${{ inputs.include_conda && 'miniforge' || inputs.os }}
            FINAL_TARGET=os-gcc
          target: final

      - name: Build BaseOS + Additional Compiler
        if: ${{ inputs.compiler != '<disabled>' }}
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-${{ inputs.os }}:latest
          cache-from: type=registry,ref=${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-${{ inputs.os }}-${{ inputs.compiler }}:buildcache-${{env.INPUTS_SHA }}
          cache-to: type=registry,ref=${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-${{ inputs.os }}-${{ inputs.compiler }}:buildcache-${{env.INPUTS_SHA }},mode=max
          context: containers/devenv
          file: containers/devenv/Dockerfile
          build-args: |
            BASE_OS=${{ inputs.os }}
            COMPILER_FAMILY=${{ inputs.compiler }}
            COMPILERS_PREREQ=${{ inputs.include_conda && 'miniforge' || inputs.os }}
            GCC_VERSION=${{ inputs.compiler == 'gcc' && inputs.compiler_version || 'none' }}
            FINAL_TARGET=${{ inputs.include_cuda && 'cuda' || inputs.compiler }}
          target: final

      - name: Build BaseOS + Additional Compiler + MPI
        if: ${{ inputs.mpi != '<disabled>' && inputs.compiler != '<disabled>' }}
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-${{ inputs.os }}:latest
          cache-from: type=registry,ref=${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-${{ inputs.os }}-${{ inputs.compiler }}-${{ inputs.mpi }}:buildcache-${{env.INPUTS_SHA }}
          cache-to: type=registry,ref=${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-${{ inputs.os }}-${{ inputs.compiler }}-${{ inputs.mpi }}:buildcache-${{env.INPUTS_SHA }},mode=max
          context: containers/devenv
          file: containers/devenv/Dockerfile
          build-args: |
            BASE_OS=${{ inputs.os }}
            COMPILER_FAMILY=${{ inputs.compiler }}
            COMPILERS_PREREQ=${{ inputs.include_conda && 'miniforge' || inputs.os }}
            GCC_VERSION=${{ inputs.compiler == 'gcc' && inputs.compiler_version || 'none' }}
            MPI_FAMILY=${{ inputs.mpi }}
            MPI_PREREQ=${{ inputs.include_cuda && 'cuda' || inputs.compiler }}
            MPICH_VERSION=${{ (inputs.mpi == 'mpich' || inputs.mpi == 'mpich3') && inputs.mpi_version || 'none' }}
            OPENMPI_VERSION=${{ inputs.mpi == 'openmpi' && inputs.mpi_version || 'none' }}
            FINAL_TARGET=fftlibs
          target: final
