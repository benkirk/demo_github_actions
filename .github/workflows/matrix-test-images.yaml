name: Test HPC Development Containers

on:
  # workflow_run:
  #   workflows: [ Build HPC Development Images ]
  #   types:
  #     - completed

  workflow_dispatch:
    inputs:
      os:
        description: 'Base OS'
        type: choice
        required: true
        default: almalinux9
        options:
          - almalinux8
          - almalinux9
          - leap
          - tumbleweed
          - noble

      # cuda:
      #   description: 'Include CUDA'
      #   type: boolean
      #   required: false
      #   default: true

      dart:
        description: 'Build Simple Dart Example'
        type: boolean
        default: true
      dart_version:
        description: 'DART Release Version'
        required: true
        type: string
        default: 'v11.8.8'

      kokkos:
        description: 'Build Simple Kokkos Example'
        type: boolean
        default: true
      kokkos_version:
        description: 'Kokkos Release Version'
        required: true
        type: string
        default: '4.5.01'

jobs:

  run-matrix:
    strategy:
      fail-fast: false
      matrix:
        compiler: [ oneapi, aocc, os-gcc, gcc12, gcc13 ]
        mpi:      [ openmpi, mpich, mpich3 ]
        arch:     [ x86_64, arm64 ]

        include:
          - compiler: oneapi
            extra_stream_args: 'CC=icx CFLAGS="-O3 -qopenmp -mcmodel=medium"'
            extra_osu_args: 'CFLAGS="-qopenmp"'
            extra_hpcg_args: 'CXXFLAGS="-O3 -qopenmp"'

        exclude:
          - arch: arm64
            compiler: oneapi
          - arch: arm64
            compiler: aocc
          - compiler: clang
            mpi: mpich3

    name: Test
    runs-on: ${{ matrix.arch == 'x86_64' && 'ubuntu-latest' || 'ubuntu-24.04-arm' }}

    defaults:
      run:
        shell: bash -elo pipefail {0}

    container:
      image: benjaminkirk/gh-ci-${{ matrix.arch == 'arm64' && 'aarch64' || matrix.arch }}-${{ inputs.os }}-${{ matrix.compiler == 'os-gcc' && 'gcc' || matrix.compiler }}-${{ matrix.mpi }}:latest

    steps:
      - name: Interrogate Runtime Environment
        run: |
          pwd
          ls
          find -type d
          env
          cat /container/config_env.sh
          df -h
          ls -l /glade/ || echo "No /glade on this runner?!!"
          cat /etc/os-release 2>/dev/null || true
          uname -a
          lscpu
          nvidia-smi 2>/dev/null || true
          echo && echo && echo
          echo '----------------------------------------------------------------'
          echo && echo && echo
          echo "CC=${CC}"
          echo "CXX=${CXX}"
          echo "FC=${FC}"
          echo "F77=${F77}"
          echo
          echo "CFLAGS=${CFLAGS}"
          echo "CPPFLAGS=${CPPFLAGS}"
          echo "CXXFLAGS=${CXXFLAGS}"
          echo "FCFLAGS=${FCFLAGS}"
          echo "F77FLAGS=${F77FLAGS}"
          export CC CXX FC F77 CFLAGS CXXFLAGS FCFLAGS F77FLAGS CPPFLAGS
          which mpicc
          mpicc --version 2>/dev/null || true

      - uses: actions/checkout@v4
        with:
          submodules: 'true'
          fetch-depth: 0

      - name: List Source Tree
        run: |
          pwd
          find * ! -type d
un
      - name: Hello World
        run: |
          mpicxx -o ./hello_world_mpi src/hello_world_mpi.C -fopenmp
          ldd ./hello_world_mpi
          export OMP_NUM_THREADS=2
          mpiexec -n 2 ${{ matrix.extra_mpiexec_args }} ./hello_world_mpi || true

      - name: DART
        if: ${{ inputs.dart }}
        run: |
          export DART_VERSION="${{ inputs.dart_version }}"
          ./scripts/build_dart.sh

      - name: Kokkos
        if: ${{ inputs.kokkos }}
        run: |
          export KOKKOS_VERSION="${{ inputs.kokkos_version }}"
          ./scripts/build_kokkos.sh
