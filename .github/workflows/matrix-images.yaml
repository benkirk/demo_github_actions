name: Matrix HPC Development Container Image

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Base OS'
        type: choice
        required: true
        default: almalinux9
        options:
          - almalinux8
          - almalinux9
          - leap
          - tumbleweed
          - noble

      conda:
        description: 'Include Conda (Miniforge)'
        type: boolean
        required: false
        default: true

      cuda:
        description: 'Include CUDA'
        type: boolean
        required: false
        default: false

jobs:

  build-matrix:
    strategy:
      fail-fast: false
      matrix:
        #compiler: [ oneapi, aocc, os-gcc, gcc12, gcc13 ]
        #mpi:      [ openmpi, mpich, mpich3 ]
        compiler: [ os-gcc ]
        mpi:      [ openmpi ]
        arch:     [ x86_64, arm64 ]

        # include:
        #   # compiler build arg specifications
        #   - compiler: oneapi
        #     compiler_build_args: |
        #       COMPILER_FAMILY=oneapi

        #   - compiler: aocc
        #     compiler_build_args: |
        #       COMPILER_FAMILY=aocc

        #   - compiler: os-gcc
        #     compiler_build_args: |
        #       COMPILER_FAMILY=os-gcc

        #   - compiler: gcc12
        #     compiler_build_args: |
        #       COMPILER_FAMILY=gcc
        #       GCC_VERSION=12.4.0

        #   - compiler: gcc13
        #     compiler_build_args: |
        #       COMPILER_FAMILY=gcc
        #       GCC_VERSION=13.3.0

        #   # mpi build arg specifications
        #   - mpi: openmpi
        #     mpi_build_args: |
        #       MPI_FAMILY=openmpi
        #       OPENMPI_VERSION=5.0.7

        #   - mpi: openmpi
        #     compiler: aocc
        #     mpi_build_args: |
        #       MPI_FAMILY=openmpi
        #       OPENMPI_VERSION=4.1.8

        #   - mpi: mpich
        #     mpi_build_args: |
        #       MPI_FAMILY=mpich
        #       MPICH_VERSION=4.3.0

        #   - mpi: mpich3
        #     mpi_build_args: |
        #       MPI_FAMILY=mpich3
        #       MPICH_VERSION=3.4.3

        exclude:
          - compiler: oneapi
            arch: arm64
          - compiler: aocc
            arch: arm64

    name: Build Container Images
    runs-on: ${{ matrix.arch == 'x86_64' && 'ubuntu-latest' || 'ubuntu-24.04-arm' }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
          fetch-depth: 0

      - name: Create containers/devenv/extras
        run: |
          sudo apt-get update
          sudo apt-get install make
          which make
          pwd
          ls
          make -C containers/devenv extras

      - name: Interrogate Environment
        run: |
          cat /etc/os-release
          uname -a
          env | sort
          df -h
          lscpu

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}
          password: ${{ secrets.BENKIRK_DOCKERHUB_TOKEN }}

      - name: Query Docker Environment
        run: |
          which docker
          docker --version
          docker buildx ls
          docker buildx inspect
          docker buildx du

      - name: Build Environment Variables
        run: |
          cat << EOF >> ${GITHUB_ENV}
          COMPILER_LABEL=${{ matrix.compiler == 'os-gcc' && 'gcc' || matrix.compiler }}
          MPI_LABEL=${{ matrix.mpi }}
          IMAGE_PREFIX=gh-ci-$(uname -m)-${{ inputs.os }}
          EOF
          cat << EOF > build_inputs.txt
          arch: '${{ matrix.arch }}'
          os: '${{ inputs.os }}'
          conda: '${{ inputs.conda }}'
          compiler: '${{ matrix.compiler }}'
          ${{ matrix.compiler_build_args }}
          cuda: '${{ inputs.cuda }}'
          mpi: '${{ matrix.mpi }}'
          ${{ matrix.mpi_build_args }}
          EOF
          echo && echo "Build Inputs:" && cat build_inputs.txt
          shasum build_inputs.txt > inputs_sha.txt
          cat inputs_sha.txt
          echo "INPUTS_SHA=$(cat inputs_sha.txt | cut -c1-7)" >> $GITHUB_ENV

      # - name: Base OS
      #   uses: docker/build-push-action@v6
      #   with:
      #     push: true
      #     tags: ${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}:latest
      #     cache-from: type=registry,ref=${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-cache-${{ inputs.os }}:buildcache-${{env.INPUTS_SHA }}
      #     cache-to: type=registry,ref=${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-cache-${{ inputs.os }}:buildcache-${{env.INPUTS_SHA }},mode=max
      #     context: containers/devenv
      #     file: containers/devenv/Dockerfile
      #     build-args: |
      #       BASE_OS=${{ inputs.os }}
      #       COMPILER_FAMILY=os-gcc
      #       COMPILERS_PREREQ=${{ inputs.conda && 'miniforge' || inputs.os }}
      #       FINAL_TARGET=compilers
      #     target: final

      # - name: Additional Compiler - Cache SHA
      #   run: |
      #     cat << EOF >> build_inputs.txt
      #     compiler: '${{ matrix.compiler }}'
      #     ${{ matrix.compiler_build_args }}
      #     cuda: '${{ inputs.cuda }}'
      #     EOF
      #     echo && echo "Build Inputs:" && cat build_inputs.txt
      #     shasum build_inputs.txt > inputs_sha.txt
      #     cat inputs_sha.txt
      #     echo "INPUTS_SHA=$(cat inputs_sha.txt | cut -c1-7)" >> $GITHUB_ENV

      - name: Base OS + Compiler
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-${{ env.COMPILER_LABEL }}:latest
          cache-from: type=registry,ref=${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-cache-${{ inputs.os }}:buildcache-${{env.INPUTS_SHA }}
          cache-to: type=registry,ref=${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-cache-${{ inputs.os }}:buildcache-${{env.INPUTS_SHA }},mode=max
          context: containers/devenv
          file: containers/devenv/Dockerfile
          build-args: |
            BASE_OS=${{ inputs.os }}
            ${{ matrix.compiler_build_args }}
            COMPILERS_PREREQ=${{ inputs.conda && 'miniforge' || inputs.os }}
            FINAL_TARGET=${{ inputs.cuda && 'cuda' || 'compilers' }}
          target: final

      # - name: Add MPI - Cache SHA
      #   run: |
      #     cat << EOF >> build_inputs.txt
      #     mpi: '${{ matrix.mpi }}'
      #     ${{ matrix.mpi_build_args }}
      #     EOF
      #     echo && echo "Build Inputs:" && cat build_inputs.txt
      #     shasum build_inputs.txt > inputs_sha.txt
      #     cat inputs_sha.txt
      #     echo "INPUTS_SHA=$(cat inputs_sha.txt | cut -c1-7)" >> $GITHUB_ENV

      - name: Add MPI
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-${{ env.COMPILER_LABEL }}-${{ env.MPI_LABEL }}:latest
          cache-from: type=registry,ref=${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-cache-${{ inputs.os }}:buildcache-${{env.INPUTS_SHA }}
          cache-to: type=registry,ref=${{ secrets.BENKIRK_DOCKERHUB_USERNAME }}/gh-ci-cache-${{ inputs.os }}:buildcache-${{env.INPUTS_SHA }},mode=max
          context: containers/devenv
          file: containers/devenv/Dockerfile
          build-args: |
            BASE_OS=${{ inputs.os }}
            ${{ matrix.compiler_build_args }}
            ${{ matrix.mpi_build_args }}
            MPI_PREREQ=${{ inputs.cuda && 'cuda' || 'compilers' }}
            FINAL_TARGET=fftlibs
          target: final
