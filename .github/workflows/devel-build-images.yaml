name: Devel - Build HPC Development Images

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - "**/Dockerfile"
      - "scripts/**"

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  # Matrix 1: builds & publishes gh-ci images
  build-matrix:
    name: Image
    strategy:
      fail-fast: false
      max-parallel: 24
      matrix:
        compiler: [gcc, oneapi, nvhpc, aocc]
        os: [almalinux9, almalinux10, noble, leap]
        mpi: [openmpi]

        include:
          # # gpu architecture-dependent build arg specifications
          # - gpu: cuda
          #   gpu_build_args: |
          #     CUDA_VERSION=12.9
          #     CUDA_INSTALLER_URL=https://developer.download.nvidia.com/compute/cuda/12.9.1/local_installers/cuda_12.9.1_575.57.08_linux.run

          # compiler build arg specifications
          - compiler: gcc
            compiler_build_args: |
              COMPILER_FAMILY=os-gcc
          - compiler: oneapi
            compiler_build_args: |
              COMPILER_FAMILY=oneapi
              ONEAPI_VERSION=2025.2.1
              ONEAPI_CC_URL=https://registrationcenter-download.intel.com/akdlm/IRC_NAS/04c5fd98-57e6-4a4b-be4d-e84de3aea45a/intel-dpcpp-cpp-compiler-2025.2.1.7_offline.sh
              ONEAPI_FC_URL=https://registrationcenter-download.intel.com/akdlm/IRC_NAS/466b0d65-e502-4172-9e06-24c565029b96/intel-fortran-compiler-2025.2.1.9_offline.sh

          - compiler: aocc
            compiler_build_args: |
              COMPILER_FAMILY=aocc

          - compiler: nvhpc
            compiler_build_args: |
              COMPILER_FAMILY=nvhpc
              MARCH_FLAGS=-march=x86-64-v3
              NVHPC_VERSION=25.7
              NVHPC_URL=https://developer.download.nvidia.com/hpc-sdk/25.7/nvhpc_2025_257_Linux_x86_64_cuda_12.9.tar.gz

          # - compiler: clang
          #   compiler_build_args: |
          #     COMPILER_FAMILY=clang
          #     LLVM_VERSION=21.1.1
          #     LLVM_URL=https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.1/LLVM-21.1.1-Linux-X64.tar.xz

          # mpi build arg specifications
          - mpi: openmpi
            mpi_build_args: |
              MPI_FAMILY=openmpi
              OPENMPI_VERSION=5.0.8

          # - mpi: mpich
          #   mpi_build_args: |
          #     MPI_FAMILY=mpich
          #     MPICH_VERSION=4.3.1

    # (use a cloud builder for clang -- too resource intensive for free GHA runners)
    #      buildx_cloud: ${{ matrix.compiler == "clang" }}
    uses: ./.github/workflows/build-hpc-development-image.yaml
    with:
      docker_repo: "benjaminkirk/gh-ci"
      os: ${{ matrix.os }}
      arch: "x86_64"
      runner: "ubuntu-latest"
      free_runner_space: ${{ matrix.compiler == 'nvhpc' }}
      conda: true
      gpu: "nogpu"
      gpu_build_args: ${{ matrix.gpu_build_args }}
      compiler: ${{ matrix.compiler }}
      compiler_build_args: ${{ matrix.compiler_build_args }}
      mpi: ${{ matrix.mpi }}
      mpi_build_args: ${{ matrix.mpi_build_args }}
      test: true
      publish: true
      extra_build_args: |
        HDF5_VERSION=1.12.3
        HDF5_URL=https://github.com/HDFGroup/hdf5/releases/download/hdf5-1_12_3/hdf5-1_12_3.tar.gz
        NETCDF_C_VERSION=4.9.3
        NETCDF_FORTRAN_VERSION=4.6.2
        PNETCDF_VERSION=1.14.1
        PIO_VERSION=2.6.6
        PIO_TAG=pio2_6_6
        FFTW_VERSION=3.3.10
        HEFFTE_VERSION=2.4.1

    secrets:
      dockerhub_token: ${{ secrets.BENKIRK_DOCKERHUB_TOKEN }}

  # Matrix 2: test NCAR apps with gh-ci images
  apps-matrix:
    name: Apps
    needs: build-matrix
    strategy:
      fail-fast: false
      max-parallel: 24
      matrix:
        compiler: [gcc, oneapi, nvhpc, aocc]
        os: [almalinux9, almalinux10, noble, leap]
        mpi: [openmpi]

    runs-on: "ubuntu-latest"
    defaults:
      run:
        shell: bash -elo pipefail {0}

    container:
      image: benjaminkirk/gh-ci-x86_64:${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.mpi }}-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"
          fetch-depth: 0

      - name: Interrogate Runtime Environment
        run: |
          cat /container/config_env.sh
          df -h
          free -g
          cat /etc/os-release 2>/dev/null || true
          uname -a
          lscpu
          nvidia-smi 2>/dev/null || true
          echo && echo && echo
          echo '----------------------------------------------------------------'
          echo && echo && echo
          echo "CC=${CC}"
          echo "CXX=${CXX}"
          echo "FC=${FC}"
          echo "F77=${F77}"
          echo
          echo "CFLAGS=${CFLAGS}"
          echo "CPPFLAGS=${CPPFLAGS}"
          echo "CXXFLAGS=${CXXFLAGS}"
          echo "FCFLAGS=${FCFLAGS}"
          echo "F77FLAGS=${F77FLAGS}"
          export CC CXX FC F77 CFLAGS CXXFLAGS FCFLAGS F77FLAGS CPPFLAGS
          conda --version 2>/dev/null || echo " --> no conda in this container"
          which mpicc
          mpicc --version 2>/dev/null || true

      - name: MPI+OpenMP Hello World
        run: |
          mpicxx -o ./hello_world_mpi ./scripts/hello_world_mpi.cxx -fopenmp
          ldd ./hello_world_mpi
          export OMP_NUM_THREADS=2
          export OMPI_MCA_opal_cuda_support=false
          export MPIR_CVAR_ENABLE_GPU=0
          mpiexec -n 2 ./hello_world_mpi

      - name: DART
        continue-on-error: true
        run: |
          export DART_VERSION="v11.10.9"
          timeout 25m ./scripts/build_dart.sh

      - name: WRF
        continue-on-error: true
        run: |
          export WRF_VERSION="4.7.0"
          export EXTRA_CMAKE_ARGS="-DCMAKE_BUILD_TYPE=DEBUG"
          export MAKE_J_PROCS=2
          timeout 25m ./scripts/build_wrf.sh

      - name: MPAS
        continue-on-error: true
        run: |
          export MPAS_VERSION="8.2.2"
          export DEBUG=true
          timeout 25m ./scripts/build_mpas.sh

      - name: ESMF
        continue-on-error: true
        run: |
          export ESMF_VERSION="8.8.1"
          timeout 25m ./scripts/build_esmf.sh

      - name: Kokkos
        continue-on-error: true
        run: |
          timeout 25m ./scripts/build_kokkos.sh
