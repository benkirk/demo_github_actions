name: Updated - Build, Test, and Deploy a HPC Development Image

on:
  workflow_call:
    inputs:
      os:
        description: 'Base OS'
        required: false
        type: string
        default: almalinux9

      arch:
        description: 'CPU Architecture'
        required: false
        type: string
        default: 'x86_64'

      runner:
        description: 'GitHub Runner Type'
        required: false
        type: string
        default: 'ubuntu-latest'

      free_runner_space:
        description: 'Remove unneeded software on runner host to free up disk space'
        type: boolean
        required: false
        default: false

      buildx_driver:
        description: 'Docker setup-buildx-action driver type'
        required: false
        type: string
        default: 'docker-container'

      buildx_endpoint:
        description: 'Docker setup-buildx-action endpoint'
        required: false
        type: string
        default: ''

      conda:
        description: 'Include Conda (Miniforge)'
        type: boolean
        required: false
        default: true

      compiler:
        description: 'Compiler'
        type: string
        required: false
        default: 'os-gcc'

      compiler_build_args:
        description: 'Compiler Docker BUILD_ARGS'
        type: string
        required: false

      mpi:
        description: 'MPI'
        type: string
        required: false
        default: 'openmpi'

      mpi_build_args:
        description: 'MPI Docker BUILD_ARGS'
        type: string
        required: false

      gpu:
        description: 'GPU / Accelerator framework'
        type: string
        required: false
        default: 'nogpu'

      gpu_build_args:
        description: 'GPU Docker BUILD_ARGS'
        type: string
        required: false

      extra_build_args:
        description: 'Miscellaneous Docker BUILD_ARGS'
        type: string
        required: false

      test:
        description: 'Test Image'
        type: boolean
        required: false
        default: false

      publish:
        description: 'Publish Image'
        type: boolean
        required: false
        default: false

    secrets:
      dockerhub_token:
        required: true



jobs:

  build-image:
    name: Build, Test, & Publish Image
    runs-on: ${{ inputs.runner }}

    steps:
      - name: Check out Repository
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          fetch-depth: 0

      - name: Create containers/refactor/extras
        run: |
          which make 2>/dev/null || { sudo apt-get update && sudo apt-get install make; }
          make -C containers/refactor extras

      - name: Free Disk Space on Runner
        if: ${{ inputs.free_runner_space }}
        uses: ./.github/actions/slim-action-runner

      - name: Interrogate Runner Environment
        run: |
          env | sort && echo
          cat /etc/os-release && echo
          uname -a && echo
          df -h && echo
          lscpu

      - name: Set up Docker BuildX (local)
        if: ${{ inputs.buildx_endpoint == '' }}
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ inputs.arch == 'x86_64' && 'linux/amd64' || 'linux/arm64' }}

      - name: Set up Docker BuildX (remote)
        if: ${{ inputs.buildx_endpoint != '' }}
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ inputs.arch == 'x86_64' && 'linux/amd64' || 'linux/arm64' }}
          driver: ${{ inputs.buildx_driver }}
          endpoint: ${{ inputs.buildx_endpoint }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: benjaminkirk
          password: ${{ secrets.dockerhub_token }}

      - name: Query Docker Environment
        run: |
          which docker
          docker --version
          docker buildx ls
          docker buildx inspect
          docker buildx du

      #----------------------------------------------
      # Build image
      #----------------------------------------------
      - name: Set Image Build Environment & Tag Variables
        run: |
          COMPILER_LABEL="-${{ inputs.compiler == 'os-gcc' && 'gcc' || inputs.compiler }}"
          GPU_LABEL="-${{ inputs.gpu }}"
          MPI_LABEL="-${{ inputs.mpi }}"

          cat << EOF > build_inputs.txt
          arch: '${{ inputs.arch }}'
          os: '${{ inputs.os }}'
          compiler: '${{ inputs.compiler }}'
          ${{ inputs.compiler_build_args }}
          mpi: '${{ inputs.mpi }}'
          ${{ inputs.mpi_build_args }}
          gpu: '${{ inputs.gpu }}'
          ${{ inputs.gpu_build_args }}
          ${{ inputs.extra_build_args }}
          EOF

          sed -i '/^[[:space:]]*$/d' build_inputs.txt
          echo && echo "Build Inputs:" && cat build_inputs.txt
          shasum build_inputs.txt > inputs_sha.txt
          cat inputs_sha.txt
          INPUTS_SHA=$(cat inputs_sha.txt | cut -c1-7)
          if [[ "${{ inputs.gpu }}" == "nogpu" ]]; then
              GPU_LABEL=
          fi

          CI_CACHE=benjaminkirk/gh-ci-refactor-cache-${{ inputs.os }}:cache-${{ inputs.arch }}-${{ inputs.os }}${COMPILER_LABEL}${MPI_LABEL}${GPU_LABEL}-${INPUTS_SHA}
          CI_TAG=benjaminkirk/gh-ci-refactor-${{ inputs.arch }}:${{ inputs.os }}${COMPILER_LABEL}${MPI_LABEL}${GPU_LABEL}-devel
          PUBLISH_TAG=${CI_TAG}
          PUBLISH_TAG=${PUBLISH_TAG//benjaminkirk/ncarcisl}
          PUBLISH_TAG=${PUBLISH_TAG//gh-ci-refactor/cisldev}
          #PUBLISH_TAG=${PUBLISH_TAG//-devel/-latest}

          cat << EOF > tags.sh
          CI_CACHE=${CI_CACHE}
          CI_TAG=${CI_TAG}
          PUBLISH_TAG=${PUBLISH_TAG}
          EOF

          cat tags.sh
          cat tags.sh >> ${GITHUB_ENV}

      - name: BaseOS + Toolkits + Compiler + MPI Image
        uses: docker/build-push-action@v6
        with:
          push: true
          load: false
          tags: ${{ env.CI_TAG }}
          cache-from: type=registry,ref=${{env.CI_CACHE }}
          cache-to: type=registry,ref=${{ env.CI_CACHE }},mode=max
          context: containers/refactor
          file: containers/refactor/Dockerfile
          target: final
          build-args: |
            BASE_OS=${{ inputs.os }}
            FINAL_TARGET=fftlibs
            MINIFORGE_PREREQ=${{ inputs.gpu == 'cuda' && 'cuda' || 'base_os' }}
            ${{ inputs.extra_build_args }}
            ${{ inputs.gpu_build_args }}
            ${{ inputs.compiler_build_args }}
            ${{ inputs.mpi_build_args }}

      - name: Done Build - Clean Docker (images, containers, volumes, cache)
        if: ${{ inputs.free_runner_space }}
        uses: ./.github/actions/slim-action-runner

      #----------------------------------------------
      # Test image
      #----------------------------------------------
      # ref https://docs.docker.com/build/ci/github-actions/test-before-push/
      - name: Test Image - Environment Variables
        if: ${{ inputs.test }}
        run: |
          cat << EOF > test_env.cfg
          OMPI_MCA_opal_cuda_support=false
          MPIR_CVAR_ENABLE_GPU=0
          EOF

          echo "setting runtime-disable GPU-Aware MPI env vars for both OpenMPI and MPICH..."
          cat test_env.cfg

      - name: Test Image - Pull
        if: ${{ inputs.test }}
        run: |
          docker run --rm --env-file test_env.cfg \
            ${{ env.CI_TAG }} \
            cat /container/config_env.sh

      - name: Test Image - OSU
        if: ${{ inputs.test }}
        run: |
          docker run --rm --env-file test_env.cfg \
            --env OMB_VERSION=7.5.1 \
            ${{ env.CI_TAG }} \
            /container/extras/build_osu-micro-benchmarks.sh

      - name: Test Image - Dart
        if: ${{ inputs.test }}
        run: |
          docker run --rm --env-file test_env.cfg \
            --env DART_VERSION=v11.12.1 \
            ${{ env.CI_TAG }} \
            /container/extras/build_dart.sh

      - name: Test Image - Kokkos
        if: ${{ inputs.test }}
        run: |
          docker run --rm --env-file test_env.cfg \
            --env KOKKOS_VERSION=4.6.02 \
            ${{ env.CI_TAG }} \
            /container/extras/build_kokkos.sh

      - name: Done Testing - Clean Docker (images, containers, volumes, cache)
        if: ${{ inputs.free_runner_space }}
        uses: ./.github/actions/slim-action-runner

      #----------------------------------------------
      # Publish image
      #----------------------------------------------
      - name: Publish Image
        if: ${{ inputs.publish && inputs.test }}
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_SUMMARY: false
        with:
          push: false
          load: false
          tags: ${{ env.PUBLISH_TAG }}
          context: containers/publish
          file: containers/publish/Dockerfile
          build-args: |
            BASE_IMAGE=${{ env.CI_TAG }}
            DEPLOYMENT_SCRIPTS=/container/extras/build_osu-micro-benchmarks.sh
          target: final

      # - name: Run Published Image
      #   if: ${{ inputs.publish && inputs.test }}
      #   run: |
      #     docker run --rm \
      #       ${{ env.PUBLISH_TAG }} \
      #       mpicc --version

      - name: Done Publish - Clean Docker (images, containers, volumes, cache)
        if: ${{ inputs.free_runner_space }}
        uses: ./.github/actions/slim-action-runner
