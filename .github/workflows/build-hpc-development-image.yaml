name: Build HPC Development Image

on:
  workflow_call:
    inputs:
      os:
        description: 'Base OS'
        required: false
        type: string
        default: almalinux9

      arch:
        description: 'CPU Architecture'
        required: false
        type: string
        default: 'x86_64'

      runner:
        description: 'GitHub Runner Type'
        required: false
        type: string
        default: 'ubuntu-latest'

      conda:
        description: 'Include Conda (Miniforge)'
        type: boolean
        required: false
        default: true

      compiler:
        description: 'Compiler'
        type: string
        required: false
        default: 'os-gcc'

      compiler_build_args:
        description: 'Compiler Docker BUILD_ARGS'
        type: string
        required: false

      mpi:
        description: 'MPI'
        type: string
        required: false
        default: 'openmpi'

      mpi_build_args:
        description: 'MPI Docker BUILD_ARGS'
        type: string
        required: false

      gpu:
        description: 'GPU / Accelerator framework'
        type: string
        required: false
        default: 'nogpu'

      gpu_build_args:
        description: 'GPU Docker BUILD_ARGS'
        type: string
        required: false

      test:
        description: 'Test Image'
        type: boolean
        required: false
        default: false

      publish:
        description: 'Publish Image'
        type: boolean
        required: false
        default: false

    secrets:
      dockerhub_token:
        required: true



jobs:
  build-image:
    name: Build Image

    runs-on: ${{ inputs.runner }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
          fetch-depth: 0

      - name: Create containers/devenv/extras
        run: |
          sudo apt-get update
          sudo apt-get install make
          which make
          pwd
          ls
          make -C containers/devenv extras

      - name: Interrogate Environment
        run: |
          env | sort && echo
          cat /etc/os-release && echo
          uname -a && echo
          df -h && echo
          lscpu

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ inputs.arch == 'x86_64' && 'linux/amd64' || 'linux/arm64' }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: benjaminkirk
          password: ${{ secrets.dockerhub_token }}

      - name: Query Docker Environment
        run: |
          which docker
          docker --version
          docker buildx ls
          docker buildx inspect
          docker buildx du

      - name: Build Environment Variables
        run: |
          cat << EOF >> ${GITHUB_ENV}
          COMPILER_LABEL=-${{ inputs.compiler == 'os-gcc' && 'gcc' || inputs.compiler }}
          GPU_LABEL=-${{ inputs.gpu }}
          MPI_LABEL=-${{ inputs.mpi }}
          EOF
          cat << EOF > build_inputs.txt
          arch: '${{ inputs.arch }}'
          os: '${{ inputs.os }}'
          conda: '${{ inputs.conda }}'
          compiler: '${{ inputs.compiler }}'
          ${{ inputs.compiler_build_args }}
          mpi: '${{ inputs.mpi }}'
          ${{ inputs.mpi_build_args }}
          gpu: '${{ inputs.gpu }}'
          ${{ inputs.gpu_build_args }}
          EOF
          sed -i '/^[[:space:]]*$/d' build_inputs.txt
          echo && echo "Build Inputs:" && cat build_inputs.txt
          shasum build_inputs.txt > inputs_sha.txt
          cat inputs_sha.txt
          echo "INPUTS_SHA=$(cat inputs_sha.txt | cut -c1-7)" >> ${GITHUB_ENV}
          if [[ "${{ inputs.gpu }}" == "nogpu" ]]; then
              echo "GPU_LABEL=" >> ${GITHUB_ENV}
          fi

      - name: Set Image Tag
        id: tags
        run: |
          CI_IMAGE_TAG=benjaminkirk/gh-ci-${{ inputs.arch }}-${{ inputs.os }}${COMPILER_LABEL}${MPI_LABEL}${GPU_LABEL}:latest
          PUBLISH_IMAGE_TAG=ncarcisl/cisldev-${{ inputs.arch }}-${{ inputs.os }}${COMPILER_LABEL}${MPI_LABEL}${GPU_LABEL}:latest
          cat << EOF >> ${GITHUB_ENV}
          CI_IMAGE_TAG=${CI_IMAGE_TAG}
          PUBLISH_IMAGE_TAG=${PUBLISH_IMAGE_TAG}
          EOF
          cat << EOF >> ${GITHUB_OUTPUT}
          CI_IMAGE_TAG=${CI_IMAGE_TAG}
          PUBLISH_IMAGE_TAG=${PUBLISH_IMAGE_TAG}
          INPUTS_SHA=${INPUTS_SHA}
          EOF

      - name: Base OS + Compiler + MPI
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.CI_IMAGE_TAG }}
          cache-from: type=registry,ref=benjaminkirk/gh-ci-cache-${{ inputs.os }}:cache-${{ inputs.arch }}-${{env.INPUTS_SHA }}
          cache-to: type=registry,ref=benjaminkirk/gh-ci-cache-${{ inputs.os }}:cache-${{ inputs.arch }}-${{ env.INPUTS_SHA }},mode=max
          context: containers/devenv
          file: containers/devenv/Dockerfile
          build-args: |
            BASE_OS=${{ inputs.os }}
            ${{ inputs.compiler_build_args }}
            ${{ inputs.gpu_build_args }}
            ${{ inputs.mpi_build_args }}
            MPI_PREREQ=${{ inputs.gpu == 'nogpu' && 'compilers' || inputs.gpu }}
            FINAL_TARGET=fftlibs
          target: final

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-build_config-${{ env.INPUTS_SHA }}
          path: |
            build_inputs.txt
            inputs_sha.txt
          retention-days: 2

    outputs:
      CI_IMAGE_TAG: ${{ steps.tags.outputs.CI_IMAGE_TAG }}
      PUBLISH_IMAGE_TAG: ${{ steps.tags.outputs.PUBLISH_IMAGE_TAG }}
      INPUTS_SHA: ${{ steps.tags.outputs.INPUTS_SHA }}



  test-image:
    name: Test Image
    needs: build-image
    runs-on: ${{ inputs.runner }}

    defaults:
      run:
        shell: bash -elo pipefail {0}

    container:
      image: ${{ needs.build-image.outputs.CI_IMAGE_TAG }}

    if: ${{ inputs.test }}
    steps:
      - name: Interrogate Runtime Environment
        id: tags
        run: |
          echo "PUBLISH_IMAGE_TAG=${{ needs.build-image.outputs.PUBLISH_IMAGE_TAG }}" >> ${GITHUB_OUTPUT}
          echo "INPUTS_SHA=${{ needs.build-image.outputs.INPUTS_SHA }}" >> ${GITHUB_OUTPUT}
          pwd
          ls
          find -type d
          env
          cat /container/config_env.sh
          df -h
          ls -l /glade/ || echo "No /glade on this runner?!!"
          cat /etc/os-release 2>/dev/null || true
          uname -a
          lscpu
          nvidia-smi 2>/dev/null || true
          echo && echo && echo
          echo '----------------------------------------------------------------'
          echo && echo && echo
          echo CI_IMAGE_TAG=${{ needs.build-image.outputs.CI_IMAGE_TAG }}
          echo PUBLISH_IMAGE_TAG=${{ needs.build-image.outputs.PUBLISH_IMAGE_TAG }}
          echo
          echo "CC=${CC}"
          echo "CXX=${CXX}"
          echo "FC=${FC}"
          echo "F77=${F77}"
          echo
          echo "CFLAGS=${CFLAGS}"
          echo "CPPFLAGS=${CPPFLAGS}"
          echo "CXXFLAGS=${CXXFLAGS}"
          echo "FCFLAGS=${FCFLAGS}"
          echo "F77FLAGS=${F77FLAGS}"
          export CC CXX FC F77 CFLAGS CXXFLAGS FCFLAGS F77FLAGS CPPFLAGS
          which mpicc
          mpicc --version 2>/dev/null || true

      - name: MPI+OpenMP Hello World
        run: |
          mpicxx -o ./hello_world_mpi /container/extras/hello_world_mpi.C -fopenmp
          ldd ./hello_world_mpi
          export OMP_NUM_THREADS=2
          mpiexec -n 2 ${{ matrix.extra_mpiexec_args }} ./hello_world_mpi || true

      - name: OSU MPI Benchmarks
        run: |
          /container/extras/build_osu-micro-benchmarks.sh

      - name: DART
        continue-on-error: true
        run: |
          export DART_VERSION="v11.10.9"
          /container/extras/build_dart.sh

      - name: WRF
        continue-on-error: true
        run: |
          export WRF_VERSION="4.7.0"
          export EXTRA_CMAKE_ARGS="-DCMAKE_BUILD_TYPE=DEBUG"
          export MAKE_J_PROCS=2
          /container/extras/build_wrf.sh

      - name: MPAS
        continue-on-error: true
        run: |
          export MPAS_VERSION="8.2.2"
          export DEBUG=true
          /container/extras/build_mpas.sh

      - name: ESMF
        continue-on-error: true
        run: |
          export ESMF_VERSION="8.8.1"
          /container/extras/build_esmf.sh

      - name: Kokkos
        continue-on-error: true
        run: |
          /container/extras/build_kokkos.sh

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-container_config-${{ needs.build-image.outputs.INPUTS_SHA }}
          path: /container/config_env.sh
          retention-days: 2

    outputs:
      PUBLISH_IMAGE_TAG: ${{ steps.tags.outputs.PUBLISH_IMAGE_TAG }}
      INPUTS_SHA: ${{ steps.tags.outputs.INPUTS_SHA }}



  publish-image:
    name: Publish Image
    needs: test-image
    runs-on: ${{ inputs.runner }}

    if: ${{ inputs.publish }}
    steps:
      - name: No-Op
        run: |
          env | sort







      # - uses: actions/download-artifact@v4
      #   with:
      #     pattern: artifact-*${{ needs.test-image.outputs.INPUTS_SHA }}

      # - name: Display structure of downloaded files
      #   run: |
      #     ls -ld artifact-*/
      #     cat artifact-*/*
